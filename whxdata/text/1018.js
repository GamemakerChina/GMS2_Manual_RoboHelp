rh._.exports({"0":[["array_all"]],"1":[["array_all"]],"2":[["array_all"]],"3":[["\n  "],["\n  ","This function returns ","true"," if the predicate function returns ","true"," for ","all"," of the elements in the array or a range of it.","\n     ","\n  ","\n  ","\n  "],["\n  ","array_all","(array, function, [offset], [length]);","\n  ","\n    ","\n      ","\n      ","\n      ","\n    ","\n    ","\n      ","\n        ","Argument","\n        ","Type","\n        ","Description","\n      ","\n      ","\n        ","array","\n        ","Array","\n        ","The array to use","\n      ","\n      ","\n        ","function","\n        ","Function","\n        ","The function to use for each element","\n      ","\n      ","\n        ","offset","\n        ","Real","\n        ","OPTIONAL"," The offset, or the starting index, in the array. Setting a negative value will count from the end of the array. The starting index will then be ","array_length(array) + offset",".","\n      ","\n      ","\n        ","length","\n        ","Real","\n        ","OPTIONAL"," The number of elements to traverse. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2 > 1 > 0 instead of 0 > 1 > 2).","\n      ","\n    ","\n  ","\n  "],["\n  ","function(element, index);","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Type","\n        ","Description","\n      ","\n      ","\n        ","element","\n        ","Any","\n        ","The current array element","\n      ","\n      ","\n        ","index","\n        ","Real","\n        ","The current array index","\n      ","\n    ","\n  ","\n\n","\n  "],["\n  ","Boolean"," (whether the condition checked in the function is ","true"," or ","false",")","\n\n","\n  "," ","\n  "],["\n  ","Boolean"," (whether the function returned ","true"," for all elements in the array or range)","\n  "," ","\n  "],["\n  ","function is_even(element, index)","\n    {","\n        return (element mod 2 == 0);","\n    }","\n    values = [2, 4, 8, 10, 12, 14, 18, 22, 46];","\n    var all_elements_are_even = array_all(values, is_even);","\n  ","The above code first defines a function ","is_even"," that returns ","true"," if the remainder of the element by 2 is equal to 0 (i.e. it is even). It then creates an array ","values"," and adds a couple of numbers to it. Finally it calls ","array_all"," on the array and stores the result in a temporary variable ","all_elements_are_even",". As all values in the array are even, ","all_elements_are_even"," will be set to ","true",".","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Array Functions","\n        ","Next: ","array_foreach","\n      ","\n    ","\n    "],["\n  ","\n  ","\n  ","\n\n"]],"4":[["array_all"]],"5":[["Syntax:"],["Function Syntax:"],["Function Returns: "],["Returns:"],["Example:"]],"6":[["© Copyright YoYo Games Ltd. 2022 All Rights Reserved"]],"id":"1018"})