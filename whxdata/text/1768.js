rh._.exports({"0":[["array_foreach"]],"3":[["\n  "],["\n  ","This function loops through an array or a range of it and executes the predicate function ","for each"," element.","\n  ","IMPORTANT"," You ","cannot"," use this function to change array elements directly, i.e. by writing ","\n      ","element = value;","\n    "," in the function. You ","can"," make changes if the array element ","references"," something else (e.g. when the array element itself is an ","array"," or ","struct",").","\n  ","\n  "],["\n  ","array_foreach","(array, function, [offset], [length]);","\n  ","\n    ","\n      ","\n      ","\n      ","\n    ","\n    ","\n      ","\n        ","Argument","\n        ","Type","\n        ","Description","\n      ","\n      ","\n        ","array","\n        ","Array","\n        ","The array to use","\n      ","\n      ","\n        ","function","\n        ","Function","\n        ","The function to use for each element","\n      ","\n      ","\n        ","offset","\n        ","Real","\n        ","OPTIONAL"," The offset, or the starting index, in the array. Setting a negative value will count from the end of the array. The starting index will then be ","array_length(array) + offset",".","\n      ","\n      ","\n        ","length","\n        ","Real","\n        ","OPTIONAL"," The number of elements to traverse. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2 > 1 > 0 instead of 0 > 1 > 2).","\n      ","\n    ","\n  ","\n  "],["\n  ","function(element, index);","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Type","\n        ","Description","\n      ","\n      ","\n        ","element","\n        ","Any","\n        ","The current array element","\n      ","\n      ","\n        ","index","\n        ","Real","\n        ","The current array index","\n      ","\n    ","\n  ","\n\n","\n  "," ","\n  "],["\n  ","N/A","\n  "," ","\n  "],["\n  ","var array = [{\"x\": 4, \"y\": 5}, {\"x\": 12, \"y\": 8}, {\"x\": 75, \"y\": 23}];","\n    var x_to_index = function(element, index)","\n    {","\n        element.x = index;","\n    }","\n    ","array_foreach","(array, x_to_index);\n  ","\n  ","The above code first creates a temporary array of structs ","array"," where each struct stores and \"x\" and \"y\" value. It then defines a temporary function ","x_to_index"," that takes in an element and index and sets the element's \"x\" to that index. It expects the ","element"," parameter to be a struct. Finally ","array_foreach"," is called with the array and the function as the arguments. After the code has executed all structs will have their \"x\" value set to their array index.","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Array Functions","\n        ","Next: ","array_reduce","\n      ","\n    ","\n    "],["\n  ","\n  ","\n  ","\n\n"]],"4":[["array_foreach"]],"5":[["Syntax:"],["Function Syntax:"],["Returns:"],["Example:"]],"6":[["© Copyright YoYo Games Ltd. 2022 All Rights Reserved"]],"id":"1768"})