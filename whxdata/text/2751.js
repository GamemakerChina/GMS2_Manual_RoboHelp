rh._.exports({"0":[["array_copy_while"]],"1":[["array_copy_while"]],"2":[["array_copy_while"]],"3":[["\n  "],["\n  ","This function creates a ","new"," array and adds elements of the input array to it ","while"," (or ","as long as",") the predicate function returns ","true",".","\n  ","The function stops execution after the first time the predicate function returns ","false",". The first element for which the predicate function returns ","false"," and any elements that come after it are ","not"," added to the new array.","\n  ","The predicate function is called for each element in the array up to the first element for which it returns ","false",".","\n  ","NOTE"," This function is identical to ","array_filter"," with the difference that this function stops execution after the first time the predicate function returns ","false",". ","array_filter"," on the other hand continues to check elements, even after encountering an element for which the predicate function returns ","false",".","\n  ","\n  ","\n  "],["\n  ","array_copy_while","(array, function, [offset], [length]);","\n  ","\n    ","\n      ","\n      ","\n      ","\n    ","\n    ","\n      ","\n        ","Argument","\n        ","Type","\n        ","Description","\n      ","\n      ","\n        ","array","\n        ","Array","\n        ","The array to use","\n      ","\n      ","\n        ","function","\n        ","Function","\n        ","The function to use for each element","\n      ","\n      ","\n        ","offset","\n        ","Real","\n        ","OPTIONAL"," The offset, or the starting index, in the array. Setting a negative value will count from the end of the array. The starting index will then be ","array_length(array) + offset",".","\n      ","\n      ","\n        ","length","\n        ","Real","\n        ","OPTIONAL"," The number of elements to traverse. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2 > 1 > 0 instead of 0 > 1 > 2).","\n      ","\n    ","\n  ","\n  "],["\n  ","function(element, index);","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Type","\n        ","Description","\n      ","\n      ","\n        ","element","\n        ","Any","\n        ","The current array element","\n      ","\n      ","\n        ","index","\n        ","Real","\n        ","The current array index","\n      ","\n    ","\n  ","\n\n","\n  "],["\n  ","Boolean"," (whether the condition checked in the function is ","true"," or ","false",")","\n\n","\n  "," ","\n  "],["\n  ","Array","\n  "," ","\n  "],["\n  ","array = [\"1\", \"2\", \"3\", \"STOP\", \"4\", \"5\", \"6\", \"STOP\", \"7\", \"8\", \"9\"];","\n    array_up_to_stop = ","array_copy_while","(array, function(element, index) {return (element != \"STOP\");}, -1, -infinity);","\n  ","The above code first creates an array ","array"," that stores strings containing the first 9 digits, with the string \"STOP\" in between. Next the function ","array_copy_while"," is called on this array, with a temporary function that returns ","true"," if the element is not equal to the string \"STOP\". The offset parameter is set to -1 and the length to -","infinity",". This will start iterating over the values backwards starting at the last array index. Finally the result is stored in the variable ","array_up_to_stop",".","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Variable Functions","\n        ","Next: ","\n      ","\n    ","\n    "],["\n  ","\n  ","\n  ","\n\n"]],"4":[["array_copy_while"]],"5":[["Syntax:"],["Function Syntax:"],["Function Returns: "],["Returns:"],["Example:"]],"6":[["© Copyright YoYo Games Ltd. 2022 All Rights Reserved"]],"id":"2751"})