rh._.exports({"3":[[" ","rollback_sync_on_frame"]],"4":[[" ","This function checks if all players are synchronised on the current frame, meaning their states are not based on predictions but on the actual data received from them. In such a case, it returns ","true","."," ","If players are not synchronised on the current frame, it returns ","false",", and attempts to synchronise all players."," ","Attempting to synchronise players with this function may cause a freeze. You must ensure that this function is not continuously called in a Step event."," ","Instead, use it as a toggle. See the example at the bottom of the page."," ","The variable ","rollback_confirmed_frame"," is updated automatically when all players are synchronised."],[" ","rollback_sync_on_frame();"],[" ","Boolean"],[" ","if (obj_game.winning_player == -1 && points >= obj_game.points_required_for_win)","\n    {","\n        if (rollback_sync_on_frame())","\n        {","\n            obj_game.winning_player = player_id;","\n        }","\n    }"," ","This code runs in a player object's Step event."," ","It checks if there is no winning player, and if the current player has the points required for winning."," ","If both are true, it means the player should win. However, before doing that, it checks if all players are synchronised, to ensure that the state is correct."," ","If all players are synchronised, it sets the ","winning_player"," variable. This results in the first condition becoming ","false",", ensuring that ","rollback_sync_on_frame()"," is not called again."," ","This means the function is used as a toggle, instead of running continuously every frame."," ","Back: ","Rollback Functions"," ","Next: ","rollback_use_random_input"]],"5":[[" ","Syntax:"],[" ","Returns:"],[" ","Example:"]],"6":[[" ","© Copyright YoYo Games Ltd. 2023 All Rights Reserved"]],"7":[[" ","rollback_sync_on_frame"]],"8":[["rollback_sync_on_frame"]],"9":[["rollback_sync_on_frame"]],"id":"1787"})