rh._.exports({"3":[["\n  ","\n  ","\n  ","\n    "],["\n    ","After following the ","Create a Multiplayer Game"," tutorial, you may have some questions about how the Rollback system works. This page aims to expand on it.","\n    "],["\n    ","It's easy to experience lag when playing online. If you're playing with someone remotely, it may take a fraction of a second for their input to reach you, but even that can be enough to ruin your game experience.","\n    ","Rollback uses predictions to reduce the effect of lag. Based on previous inputs, it predicts what the other user is going to do next, and shows you the result of that prediction, which is instant.","\n    ","When the prediction is correct, you don't experience lag, and your game feels much more responsive.","\n    ","However, sometimes the system realises its prediction was wrong. In that case, it ","rolls back"," to the last correct state, and continues the game from that point. This is why it's called \"","Rollback multiplayer","\".","\n    "],["\n    ","Rollback is deterministic. It only shares inputs with other players, and expects all of them to run the same logic on the given input, giving the same results on all clients.","\n    ","A different approach to multiplayer is \"state replication\", which continually synchronises the state of the game between clients, ensuring they are always doing the same thing.","\n    ","Rollback does not do that -- it only ever sends inputs, but also keeps an eye on the state so it can be rolled back in case of a wrong prediction.","\n    ","What is a client?","\n      ","\n      ","\n      A \"client\" is a player in your game, and refers to their copy of the game, running on their machine. ","\n    "],["\n    ","As previously mentioned, Rollback ","only communicates input"," between players.","\n    ","There are two main things that Rollback handles:","\n    ","\n      ","Input",": Each player's ","inputs"," are sent to other players. If Player 0 presses ","\"fire\""," in their own client, Rollback will ensure that other clients also see Player 0 press ","\"fire\"",".\n        ","\n        ","\n        ","Predictions are only run on input."," ","\n      ","State",": This includes all managed objects and their variables. These are NOT synchronised between players: changing one variable in one client will not automatically update it in another client.\n        ","\n        ","\n        ","State is only managed for the purpose of being rolled back."," ","\n    ","\n    "],["\n    ","Input"," changes ","state",", which is the base concept of Rollback multiplayer.","\n    ","Here is an example:","\n    ","\n      ","Input",": Player 0 presses ","\"fire\"",".","\n      ","State",": Because Player 0 pressed fire, a projectile is created. That projectile eventually collides with a rock. This results in Player 0 getting a point.\n        ","\n        ","\n        This is essentially your whole game, dependent entirely on input. ","\n    ","\n    ","\"","Input","\" is what Rollback communicates between all players, not the state.","\n    ","However, because all game clients run the same logic on the received input (which is a requirement), ","they all result in the same state",".","\n    ","\n    "],["\n    ","If only input is synchronised, then what is ","state"," for?","\n    ","Because input affects state, a wrong input prediction can result in a ","wrong state",".","\n    ","When rollback finds that a prediction was wrong, it replaces the current state with the correct state, and runs inputs and predictions from that point again. This includes all your managed objects and their variables.","\n    ","This does not mean that Rollback is synchronising objects and variables between clients. Just because ","variable_a"," is set to ","\"Gurpreet\""," in one client, it won't mean other clients will also see the same value.","\n    ","They would only see the same value for a variable if it was derived from a player's input, or some other managed system, such as alarms and random functions.","\n    "],["\n    ","Objects have a \"","Managed","\" checkbox, which is enabled for new objects by default:","\n    ","Objects that are marked as managed have the ability to be rolled back and to have predictions run on them, including all of their variables, creation and destruction.","\n    ","All objects that are part of your gameplay, like the player, manager/controller objects, item pickups, projectiles, etc. must be marked as managed.","\n    ","You can disable this for objects that don't need to be synchronised between players, such as static world objects, visuals, effects, etc. that don't affect gameplay in any way.","\n    ","Note that the managed property of a parent is not applied to its children automatically, so each child object needs to have its managed checkbox set manually.","\n    "],["\n    ","rollback_create_game()"," takes an argument for Sync Test, which is enabled by default (when the argument is not specified).","\n    ","Sync Test is used to test your game offline. If any synchronisation issues pop up, it lets you know by printing the error to the Output Log. You can use Sync Test on Windows, macOS and GX.games.","\n    ","Sync Test executes all of your game's code twice in a frame, so it can check for any synchronisation issues. This means you may see some events happening twice when testing offline, which will not happen when your game is running online.","\n    "],["\n    ","During Sync Test, \"remote\" player instances are given random input values for their ","defined inputs",", as a simple form of testing. You can disable this using ","rollback_use_random_input()",".","\n    ","\n      ","\n    ","\n    ","The second player is getting random input during Sync Test.","\n    ","You can also assign temporary mock input to remote players when in Sync Test. See ","Mock Input"," for details.","\n    "],["\n    ","You must ensure that all game clients run the ","same logic"," when the ","same input"," is received. If a particular instance was created or moved only for one client, it will not be reflected on the other clients.","\n    ","This problem usually does not occur if you program your game as shown in ","Create a Multiplayer Game",", with all player logic running the same way for all player instances regardless of whether an instance is ","local or not",". However if you implement a condition to only do something for a particular player, and not for others, that will cause a disruption in the game state.","\n    "],["\n    "],["\n    ","As shown in ","Create a Multiplayer Game",", you can define a player object with ","rollback_define_player()"," / ","Define Player (Rollback)"," and the system will automatically create instances of it for each connected player. It will also destroy instances for players that disconnect.","\n    ","Player instances created this way have their IDs assigned automatically, in the ","player_id"," variable. Within each player instance, you can simply call ","rollback_get_input()"," without any arguments and it gives you the inputs for that particular player.","\n    ","This is the standard way of using the Rollback system, however you can also manage player instances and their inputs manually.","\n    "],["\n    ","To manage player instances manually, don't call ","rollback_define_player()",". This will cause the game to start without any player instances being created.","\n    ","Then create your own player instances manually, ideally in the ","Rollback Start"," event, and give them player IDs in a custom variable. To get input for a player, call ","rollback_get_input()"," and specify the ID of the player as an argument. Call ","rollback_get_info()"," to get those ","variables"," in a struct that would otherwise be assigned to players automatically.","\n    ","This way you can manually manage when and how player instances are created, the IDs assigned to them, and retrieving input for a specific player.","\n    "],["\n    ","If you're using ","rollback_define_player()"," / ","Define Player (Rollback)",", do not destroy the player instances that are created. If you need to show a player as defeated, then change its sprite, or hide it using some other method, but keep the instance alive as it's managed by GameMaker.","\n    "],["\n    ","The Rollback system can be used when creating a single-player game. Simply specify ","1"," as the number of players when calling ","rollback_create_game()",".","\n    ","This way the system will never connect to any servers and your game will essentially be offline, with the ability to be expanded into an online multiplayer game whenever you wish.","\n    ","Take this approach when you are making a new project that may make use of multiplayer in the future, as it will be tougher to implement multiplayer into your game once it's already completed without using the Rollback system.","\n    "],["\n    ","By default, a multiplayer game starts as soon as all players have joined. However you can start it before that point by calling ","rollback_start_game()",".","\n    ","You can completely disable the auto-start behaviour by calling ","rollback_use_manual_start()",". This means the game will wait for you to manually start the game.","\n    ","Auto-start is automatically disabled when player preferences ","are enabled",".","\n    ","\n    "],["\n    ","Read the following pages for more information on the Rollback system:","\n    ","\n      ","Defining Inputs","\n      ","Rollback Constraints","\n      ","Rollback Events","\n      ","Player Preferences","\n    ","\n    "," ","\n    "," ","\n    "," ","\n    ","\n      ","\n        ","\n          ","Back: ","Rollback Multiplayer","\n          ","Next: ","Defining Inputs","\n        ","\n      ","\n      "],["\n    ","\n  \n","\n  ","\n  ","\n\n"]],"4":[["Rollback System"]],"6":[["© Copyright YoYo Games Ltd. 2022 All Rights Reserved"]],"7":[["Rollback System"]],"10":[["Determinism"],["Random and Mock Input"],["Automatic Creation of Player Instances"],["Manual Creation of Player Instances"],["Keep Player Instances Alive"]],"11":[["What is Rollback?"],["How does it work?"],["So... what's the difference?"],["What is state, then?"],["Managed Objects"],["Sync Test"],["Developing Multiplayer Effectively"],["Defining A Player Object"],["Single Player"],["Manual vs. Auto Start"],["Further Reading"]],"id":"2711"})