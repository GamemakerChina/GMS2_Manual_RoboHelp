rh._.exports({"3":[["\n  ","\n  ","\n  ","\n  "],["\n  ","This page will take you through the detailed steps for creating your first multiplayer game.","\n    ","\n    For information on the Rollback system, read ","Rollback System",".","\n    ","\n    For details on all Rollback functions, read ","Rollback Functions",".\n  ","\n  "],["\n  ","Start a new project, and create a sprite for your player object. You can import an image or just create a filled square.","\n  ","Create two objects:","\n  ","\n    ","obj_game",": This will manage your multiplayer game.","\n    ","obj_player",": This will be your actual player object. Each connected player will have their own instance of this object that they can control.","\n      ","\n      Assign your player sprite to the player object.\n    ","\n  ","\n  ","\n  ","Go ahead and place ","obj_game"," into a room. ","Don't"," place ","obj_player",", as it will be created automatically.","\n  "],["\n  ","Add the Create event to ","obj_game",", and write the following code in it:","\n  ","NOTE"," If you're using GML Visual, use the corresponding ","Rollback Actions",".","\n  ","rollback_define_player(obj_player);","\n    ","\n    var _joined = rollback_join_game();","\n    ","\n    if (!_joined)","\n    {","\n        rollback_create_game(2);","\n    }\n  ","\n  ","It first defines the player object to use, and attempts to join a game using ","rollback_join_game()",". This function returns ","true"," if the system found a game to join (meaning you are on the correct URL).","\n  ","If the game could not be joined, it returns ","false",". When the returned value is ","false",", we call ","rollback_create_game()"," to host our own game. There we specify that the game should allow a maximum of 2 players.","\n  ","NOTE"," At the moment, you can only create games for up to 4 players.","\n  ","The code above will create two instances of ","obj_player"," at the top-left corner of the room, but they will not yet be controllable.","\n  ","\n  "],["\n  ","Input is managed by the Rollback system and automatically synchronised between players.","\n  ","In your player object, call ","rollback_get_input()"," to get a struct containing all of the default inputs, which are as follows:","\n  ","left",", ","right",", ","up",", ","down",", ","Z",", ","X",", ","C",", ","space","\n    ","\n    ","These indicate whether the key is held."," ","*","_pressed"," ","and ","*","_released"," ","variants are also provided.","\n  ","\n  ","To define your own inputs, see ","Defining Inputs",".","\n  ","Now set up the player with the following code in its Create and Step events:","\n  ","// Create Event","\n    move_speed = 5;","\n    ","\n    // Step Event","\n    var _input = rollback_get_input();","\n    ","\n    if (_input.left) x -= move_speed;","\n    if (_input.right) x += move_speed;","\n    if (_input.up) y -= move_speed;","\n    if (_input.down) y += move_speed;\n  ","\n  ","This sets up a variable with the speed of the player, and in the Step event, gets the input struct.","\n  ","Based on each arrow key held, it moves the instance on the corresponding axis, e.g. pressing left reduces the X, pressing up reduces the Y, and so on.","\n  "],["\n  ","Before we test, let's ensure the players are created at specific locations, instead of spawning at the top-left corner of the room.","\n  ","In the Create event of your player object, write this:","\n  ","if (player_id == 0)","\n    {","\n        x = 300;","\n    }","\n    else if (player_id == 1)","\n    {","\n        x = room_width - 300;","\n    }","\n    ","\n    y = room_height / 2;\n  ","\n  ","player_id"," is a built-in instance variable that stores the ID of the player instance.","\n  ","Since our game has two players, our first player will have the ID ","0",", and the second player will have the ID ","1",".","\n  ","Based on that, we are changing the initial X position of the player. The Y position is the same for both.","\n  ","Now run the game, and you will see both players, where you can control the first one:","\n  ","\n  ","The second player is moving erratically on its own, which is a feature of the Rollback system. It automatically provides random values every frame for all defined inputs, as a basic form of test for your game.","\n  ","You can disable automatic random movement by calling ","rollback_use_random_input(false)",", or ","set up your own \"mock\" input"," for the other player.","\n  "],["\n  ","Your basic multiplayer example is complete, and it's ready to be taken to the internet.","\n  ","By default, the system starts in ","Sync Test"," mode, which is how you test your game offline. To enable online functionality, the second argument of ","rollback_create_game()"," needs to be set to ","false"," (which disables Sync Test).","\n  ","// obj_game: Create event","\n    rollback_define_player(obj_player);","\n    ","\n    var _joined = rollback_join_game();","\n    ","\n    if (!_joined)","\n    {","\n        rollback_create_game(2, false);","\n    }\n  ","\n  ","Sign into ","GX.games"," and set a region in your ","profile settings",".","\n  ","Run the game through the ","GX.games"," target. When the Rollback system begins, it creates a new \"room\": not a GameMaker room asset, but a ","virtual room"," in which the players will play together.","\n  "],["\n  ","When your game starts, you will not see the player instances immediately. Instead, the system will wait for all players to join before starting the game.","\n  ","TIP"," You can start the game before players have joined by calling ","rollback_start_game()",". If you call ","rollback_use_manual_start()"," then the game will wait for you to start it manually even after all players have joined.","\n  ","While waiting, you will see a \"","Copy Share Url","\" button below your game. Scroll down if you don't see the button.","\n  ","This will copy a link to your game, which you can paste into another browser window to join as the second player.","\n  ","You need to have both browser windows visible at the same time, otherwise the player whose window is hidden will time out and your game will end.","\n  ","Once both game instances have connected and synchronised, you will be able to control each player through its browser window:","\n  ","You can open both windows side-by-side by dragging and resizing them.","\n  ","During your test you will see debug messages in the top-left corner of your game, giving you info on the state of your game. You can disable this by calling ","rollback_display_events(false)",".","\n  "],["\n  ","Call ","rollback_leave_game()"," to make a player leave the room. Read the ","function page"," for detailed information on its use.","\n  "],["\n  ","The Rollback system will automatically create player instances when all players have joined, as long as you're using ","rollback_define_player()",".","\n  ","However it still allows you to run any other code before the game starts, meaning you must take care to only start your core game logic once all players have joined.","\n  ","For example, if you're spawning enemy instances using an alarm, only start that alarm once the ","Rollback Start"," event triggers.","\n  "],["\n  ","Major events in your game, such as a player winning and ending the level, should be done when all players are synchronised. Otherwise, a wrong prediction might wrongly make a player win, which would appear odd when it eventually rolls back.","\n  ","See the example on ","rollback_sync_on_frame()"," for doing this properly.","\n  "],["\n  ","Your first multiplayer game is now complete!","\n  ","Read the following pages to learn all about the Rollback system:","\n  ","\n    ","Rollback System","\n    ","Defining Inputs","\n    ","Rollback Constraints","\n    ","Rollback Events","\n    ","Player Preferences","\n  ","\n  ","You can add chat to your game using ","rollback_chat()",".","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Rollback Multiplayer","\n        ","Next: ","Rollback System","\n      ","\n    ","\n    "],["\n  ","\n\n","\n  ","\n  ","\n\n"]],"4":[["Create a Multiplayer Game"]],"6":[["© Copyright YoYo Games Ltd. 2022 All Rights Reserved"]],"7":[["Create a Multiplayer Game"]],"11":[["Project Set-Up"],["Starting the Game"],["Moving Players"],["Player Locations"],["Online Connection"],["Inviting Players"],["Leaving a Room"],["Game Logic"],["Major Events"],["Further Reading"]],"id":"2651"})