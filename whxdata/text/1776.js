rh._.exports({"0":[["array_any"]],"1":[["array_any"]],"2":[["array_any"]],"3":[["\n  "],["\n  ","This function returns ","true"," if the predicate function returns ","true"," for ","any"," of the elements in the array or in a range of it.","\n  "," ","\n  ","\n  ","\n  "],["\n  ","array_any","(array, function, [offset], [length]);","\n  ","\n    ","\n      ","\n      ","\n      ","\n    ","\n    ","\n      ","\n        ","Argument","\n        ","Type","\n        ","Description","\n      ","\n      ","\n        ","array","\n        ","Array","\n        ","The array to use","\n      ","\n      ","\n        ","function","\n        ","Function","\n        ","The function to use for each element","\n      ","\n      ","\n        ","offset","\n        ","Real","\n        ","OPTIONAL"," The offset, or the starting index, in the array. Setting a negative value will count from the end of the array. The starting index will then be ","array_length(array) + offset",".","\n      ","\n      ","\n        ","length","\n        ","Real","\n        ","OPTIONAL"," The number of elements to traverse. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2 > 1 > 0 instead of 0 > 1 > 2).","\n      ","\n    ","\n  ","\n  "],["\n  ","function(element, index);","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Type","\n        ","Description","\n      ","\n      ","\n        ","element","\n        ","Any","\n        ","The current array element","\n      ","\n      ","\n        ","index","\n        ","Real","\n        ","The current array index","\n      ","\n    ","\n  ","\n\n","\n  "],["\n  ","Boolean"," (whether the condition checked in the function is ","true"," or ","false",")","\n\n","\n  "," ","\n  "],["\n  ","Boolean"," (","true"," if there is any element in the array for which the function returns ","true",", ","false"," if there isn't any)","\n  "," ","\n  "],["\n  ","instance_data =","\n    [","\n        {\"x\": 14, \"y\": 20, \"blend\": c_red},","\n        {\"x\": 25, \"y\": 37, \"blend\": c_teal},","\n        {\"x\": 100, \"y\": 88, \"blend\": c_lime},","\n        {\"x\": 640, \"y\": 12, \"blend\": c_orange}","\n    ];","\n    var f_check_blend = function(element, index)","\n    {","\n        return (element.blend == c_red);","\n    }","\n    var any_red_blend = ","array_any","(instance_data, f_check_blend);","\n    show_debug_message(\"Instance data contains an item with c_red blend colour: \" + string(any_red_blend));","\n  ","The above code first creates an array ","instance_data",". Every array element is a ","struct"," that stores a 2D position (\"x\" and \"y\") and a \"blend\" colour. It then creates a predicate function ","f_check_blend"," that returns ","true"," when the element's \"blend\" is set to ","c_red"," and ","false"," if it's not. The code then executes ","array_any"," on the array, using the ","f_check_blend"," function, and shows a debug message with the result.","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Array Functions","\n        ","Next: ","array_all","\n      ","\n    ","\n    "],["\n  ","\n  ","\n  ","\n\n"]],"4":[["array_any"]],"5":[["Syntax:"],["Function Syntax:"],["Function Returns: "],["Returns:"],["Example:"]],"6":[["© Copyright YoYo Games Ltd. 2022 All Rights Reserved"]],"id":"1776"})