rh._.exports({"0":[["array_reduce"]],"1":[["array_reduce"]],"2":[["array_reduce"]],"3":[["\n  "],["\n  ","This function ","reduces"," the elements of the array (or a range of it) to a single value.","\n  ","To do this, the function executes the predicate function for all elements of the array and carries the return value into the next execution. It returns the return value of the last execution of the predicate function.","\n  ","IMPORTANT"," The ","carry"," is the result of the previous call to the predicate function (for the previous array index). For the first call to the predicate function this depends on the value of ","init",". If you don't provide a value for ","init"," it will default to ","array[offset]"," and the first iteration will be skipped. If you do provide a value for ","init"," it will be used as the carry value in the first iteration.","\n  "],["\n  ","array_reduce","(array, function, [init], [offset], [length]);","\n  ","\n    ","\n      ","\n      ","\n      ","\n    ","\n    ","\n      ","\n        ","Argument","\n        ","Type","\n        ","Description","\n      ","\n      ","\n        ","array","\n        ","Array","\n        ","The array to use","\n      ","\n      ","\n        ","function","\n        ","Function","\n        ","The function to use for each element","\n      ","\n      ","\n        ","init","\n        ","Any","\n        ","The initial value to use as the first carried value. If none is provided this defaults to ","array[offset]",".","\n      ","\n      ","\n        ","offset","\n        ","Real","\n        ","OPTIONAL"," The offset, or the starting index, in the array. Setting a negative value will count from the end of the array. The starting index will then be ","array_length(array) + offset",".","\n      ","\n      ","\n        ","length","\n        ","Real","\n        ","OPTIONAL"," The number of elements to traverse. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2 > 1 > 0 instead of 0 > 1 > 2).","\n      ","\n    ","\n  ","\n  "],["\n  ","function(previous, current, index);","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Type","\n        ","Description","\n      ","\n      ","\n        ","previous","\n        ","Any","\n        ","The value returned by the previous iteration","\n      ","\n      ","\n        ","current","\n        ","Any","\n        ","The current element of the iteration","\n      ","\n      ","\n        ","index","\n        ","Real","\n        ","The current index of the iteration","\n      ","\n    ","\n  ","\n  "],["\n  ","Any"," (the final return value)","\n  "],["\n  ","Any","\n  "," ","\n  "],["\n  ","var array = [2, 1, 3, 4, 5];","\n    var min_value = function(previous, current, index)","\n    {","\n        return min(previous, current);","\n    }","\n    var value = ","array_reduce","(array, min_value);","\n  ","The above piece of code first creates a temporary array ","array"," and fills it with a couple of numbers. It then creates a new function ","min_value"," that returns the minimum of its ","previous"," and ","current"," arguments. Finally it calls ","array_reduce"," on the array and stores the result in a temporary variable ","value",". This variable will contain -1 as that is the smallest value in the array.","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Array Functions","\n        ","Next: ","array_concat","\n      ","\n    ","\n    "],["\n  ","\n  ","\n  ","\n\n"]],"4":[["array_reduce"]],"5":[["Syntax:"],["Function Syntax:"],["Function Returns: "],["Returns:"],["Example:"]],"6":[["© Copyright YoYo Games Ltd. 2022 All Rights Reserved"]],"id":"2555"})