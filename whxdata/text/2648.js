rh._.exports({"3":[["\n  ","\n  ","\n  ","\n  "],["\n  ","Input is managed by the Rollback system, so it can properly be synchronised between players. Inputs for a player can be retrieved using ","rollback_get_input()",", which returns a struct containing the inputs for the player.","\n  "],["\n  ","By default you will get the following keys in the input struct:","\n  ","left",", ","right",", ","up",", ","down",", ","Z",", ","X",", ","C",", ","space","\n  ","The directional inputs are mapped to the arrow keys.","\n  "],["\n  ","Each keyboard input defined is read using ","keyboard_check()",", which gets if the key is held or not. For mouse input it uses ","mouse_check_button()",".","\n  ","With each defined input (default or custom), you also get variants that use ","keyboard_check_pressed()"," and ","keyboard_check_released()"," (and the equivalent functions for mouse input). These are added with the suffix \"","_pressed","\" and \"","_released","\" respectively.","\n  ","For example, for the ","space"," input, you will get ","space_pressed"," and ","space_released"," as well.","\n  "],["\n  "],["\n  ","To define your own inputs, create a struct containing the input keys and assigned constants to use, and then pass that into ","rollback_define_input()",". This will override the default controls mentioned at the top of this page.","\n  ","You define your input names on the left-hand side (e.g. ","fire","), and assign an input on the right-hand side (e.g. ","mb_left","):","\n  ","// Before starting rollback game","\n    rollback_define_input({","\n        fire: mb_left,","\n        interact: vk_space,","\n        left: ord(\"A\"),","\n        right: ord(\"D\")","\n    });","\n  ","Calling ","rollback_get_input()"," now will only return the inputs defined here (","fire",", ","interact",", etc.), along with ","*_pressed"," and ","*_released"," variants for each of them.","\n  ","For GML Visual, use ","Define Input (Rollback)",".","\n  "],["\n  ","You can assign any of the following input values to the inputs in your struct:","\n  ","\n    ","\n      ","\n      ","\n      ","\n    ","\n    ","\n      ","\n        ","Input Type","\n        ","Value","\n        ","Description","\n      ","\n      ","\n        ","Keyboard","\n        ","vk_*"," constants","\n        ","Use these constants to define keyboard keys. A list of such constants is ","given here",".","\n      ","\n      ","\n        ","ord(\"\")","\n        ","Define a letter key by wrapping it in ","ord()",".","\n      ","\n      ","\n        ","Gamepad","\n        ","gp_*"," constants","\n        ","Use these constants to define gamepad inputs (buttons and axes). A list of such constants is ","given here",".","\n      ","\n      ","\n        ","Mouse","\n        ","mb_*"," constants","\n        ","Use these constants to define mouse buttons. A list of such constants is ","given here",".","\n          ","\n          ","NOTE",": ","mb_any"," and ","mb_none"," cannot be used.\n        ","\n      ","\n      ","\n        ","m_axisx","\n        ","The X position of the mouse in the room (using ","mouse_x",").","\n      ","\n      ","\n        ","m_axisy","\n        ","The Y position of the mouse in the room (using ","mouse_y",").","\n      ","\n      ","\n        ","m_axisx_gui","\n        ","The X position of the mouse on the GUI layer (using ","device_mouse_x_to_gui()",").","\n      ","\n      ","\n        ","m_axisy_gui","\n        ","The Y position of the mouse on the GUI layer (using ","device_mouse_y_to_gui()",").","\n      ","\n      ","\n        ","m_scroll_up","\n        ","1"," if the mouse wheel is being scrolled up, ","0"," otherwise","\n      ","\n      ","\n        ","m_scroll_down","\n        ","1"," if the mouse wheel is being scrolled down, ","0"," otherwise","\n      ","\n    ","\n  ","\n  "],["\n  ","You can assign multiple controls to each input, by listing input constants in an array:","\n  ","rollback_define_input({","\n        fire:     [mb_left, ord(\"X\")],","\n        interact: [vk_space, ord(\"C\")],","\n        left:     [ord(\"A\"), vk_left],","\n        right:    [ord(\"D\"), vk_right]","\n    });","\n  ","In this example, ","fire"," will be triggered by both ","mb_left"," and the ","X"," key, ","interact"," will be triggered by ","vk_space"," and the ","C"," key, and so on.","\n  ","var _input = rollback_get_input();","\n    if (_input.fire)","\n    {","\n        // Runs when LMB or X is pressed","\n    }","\n  ","NOTE"," You can't bind the same input constant to multiple inputs, e.g. a specific input value (say, ","mb_left"," or ","ord(\"A\")",") can only be used ","once"," throughout your whole input struct.","\n  "],["\n  ","When testing locally, you may want to define temporary inputs for remote players so you can test multiplayer gameplay offline.","\n  ","You can achieve that by defining mock input for a player using ","rollback_define_mock_input()",". For example, after calling the code snippet above to define ","fire",", ","interact",", ","left"," and ","right"," inputs for all players, you can define a separate set of inputs for the second player specifically, which you can use during Sync Test.","\n  ","rollback_define_mock_input(1, {","\n        fire: vk_control,","\n        interact: vk_shift,","\n        left: ord(\"J\"),","\n        right: ord(\"L\")","\n    });","\n  ","This defines mock input for player 1 (the second player), keeping the same input names but assigning different inputs. This way two people could play the game locally on the same computer.","\n  "],["\n  ","Read the following pages for more information on the Rollback system:","\n  ","\n    ","Rollback Constraints","\n    ","Rollback Events","\n    ","Creating a Multiplayer Game","\n    ","Rollback System","\n  ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Rollback Multiplayer","\n        ","Next: ","Rollback Constraints","\n      ","\n    ","\n    "],["\n  ","\n\n","\n  ","\n  ","\n\n"]],"4":[["Defining Inputs"]],"6":[["© Copyright YoYo Games Ltd. 2022 All Rights Reserved"]],"7":[["Defining Inputs"]],"10":[["Defining"],["Constants"],["Multiple Controls"]],"11":[["Default Inputs"],["Input Variants"],["Custom Controls"],["Mock Input"],["Further Reading"]],"id":"2648"})