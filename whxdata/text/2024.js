rh._.exports({"0":[["array_filter"]],"1":[["array_filter"]],"2":[["array_filter"]],"3":[["\n  "],["\n  ","This function returns a ","new"," array that is the ","filtered"," version of the given array (or a range of it).","\n  ","You supply a ","Predicate Function"," which runs for all elements in the array. It should return either ","true"," or ","false"," based on a condition.","\n  ","Elements for which the predicate function returns ","true"," are included in the returned array, and ones that get"," ","false"," are ignored.","\n  ","By default the function checks the whole array. You can optionally supply ","Offset And Length"," arguments to check a part of the array, traversing the array forward or backward.","\n  ","\n  "," ","Predicate Function"," ","\n  ","\n    ","This function takes a ","Predicate Function"," that operates on the given array. The predicate function is passed the following arguments:","\n    "],["\n    ","function(element, index);","\n    ","\n      ","\n        ","\n          ","Argument","\n          ","Type","\n          ","Description","\n        ","\n        ","\n          ","element","\n          ","Any","\n          ","The current array element's value","\n        ","\n        ","\n          ","index","\n          ","Real","\n          ","The current array index","\n        ","\n      ","\n    ","\n    ","The predicate function should return a ","Boolean",", which affects how the original function modifies or reads the array",".","\n    ","See information and examples on ","Predicate Function",".","\n  ","\n\n","\n  ","NOTE"," See ","array_copy_while"," which is similar, but stops execution after the first ","false"," return of the predicate function.","\n  ","\n  ","\n  "],["\n  ","array_filter","(array, function, [offset], [length]);","\n  ","\n    ","\n      ","\n      ","\n      ","\n    ","\n    ","\n      ","\n        ","Argument","\n        ","Type","\n        ","Description","\n      ","\n      ","\n        ","array","\n        ","Array","\n        ","The array to use","\n      ","\n      ","\n        ","function","\n        ","Function","\n        ","The ","Predicate Function"," to run on each element","\n      ","\n      ","\n        ","offset","\n        ","Real","\n        ","OPTIONAL"," The offset, or starting index, in the array. Setting a negative value will count from the end of the array. The starting index will then be ","array_length(array) + offset",". See: ","Offset And Length","\n      ","\n      ","\n        ","length","\n        ","Real","\n        ","OPTIONAL"," The number of elements to traverse. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2, 1, 0 instead of 2, 3, 4). See: ","Offset And Length","\n      ","\n    ","\n  ","\n\n","\n\n","\n  "],["\n  ","Array","\n  "," ","\n  "],["\n  ","function passed_the_test(element, index)","\n    {","\n        return element >= 50;","\n    }","\n    ","\n    scores = [0, 15, 4, 78, 96, 65, 49];","\n    passed = ","array_filter","(scores, passed_the_test);\n  ","\n  ","The above code first defines a function ","passed_the_test"," that takes in ","element"," and ","index"," parameters, which is usual for array predicate functions.","\n  ","The function returns ","true"," if the value of ","element"," is greater than or equal to 50, otherwise it returns ","false",".","\n  ","It then creates an array ","scores"," with various values between 0 and 100. Finally it calls ","array_filter"," on this array and stores the new array in a variable ","passed",".","\n  ","The ","passed"," array would only contain values from the ","scores"," array that were greater than or equal to 50, satisfying the condition set in the predicate function.","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Array Functions","\n        ","Next: ","array_map","\n      ","\n    ","\n    "],["\n  ","\n  ","\n  ","\n\n"]],"4":[["array_filter"]],"5":[["Syntax:"],["Syntax:"],["Returns:"],["Example:"]],"6":[["© Copyright YoYo Games Ltd. 2022 All Rights Reserved"]],"id":"2024"})