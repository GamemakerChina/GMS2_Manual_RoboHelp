rh._.exports({"0":[["JSDoc Script Comments"]],"1":[["Code Editor - JSDoc Comments,JSDoc"]],"2":[["JSDoc,JSDoc Comments"]],"3":[["\n  ","\n  "],["\n  ","If you wish your custom functions to have code completion and to show the required arguments in a specific manner in the code editor, then you need to add some ","JSDoc style"," comments. These comments are used to tell the auto-complete feature how the function should be used and filled out in the ","script editor",".","\n  ","The format for a typical function header would be to have the function name, the description of the function, and then the list of the different arguments (parameters) that the function takes, making sure to start each line with a triple backslash \"","///","\" as that tells ","GameMaker"," to parse the comment as being JSDoc style. You can alternatively wrap your JSDoc comments in ","/**"," ... ","*/",", with the ","/**"," being on its own line.","\n  ","The comments themselves need to be given an identifier (preceded by \"","@","\") and content, and the available identifiers are as follows:","\n  ","\n    ","\n      ","\n      ","\n      ","\n    ","\n    ","\n      ","\n        ","Identifier","\n        ","Content","\n        ","Syntax","\n      ","\n      ","\n        ","@function"," / ","@func","\n        ","The full function name including arguments","\n        ","@func my_func(args)","\n      ","\n      ","\n        ","@description"," / ","@desc","\n        ","A general description of what the function does","\n        ","@desc <Description goes>","\n      ","\n      ","\n        ","@param"," / ","@","parameter"," / ","@arg"," / ","@argument","\n        ","Information on arguments, with an optional ","type","\n        ","@param ","{type}"," name <Parameter description>","\n      ","\n      ","\n        ","@return / @returns","\n        ","Type"," of data the function returns","\n        ","@return {type} <Return description>","\n      ","\n      ","\n        ","Feather"," only","\n      ","\n      ","\n        ","@pure","\n        ","Marks the function as ","pure","\n        ","@pure","\n      ","\n      ","\n        ","@ignore","\n        ","Hides the function from Feather's autocomplete","\n        ","@ignore","\n      ","\n      ","\n        ","@deprecated","\n        ","Marks the function as deprecated","\n        ","@deprecated","\n      ","\n      ","\n        ","@context / @self","\n        ","Sets the context for the function, which Feather auto-complete uses to provide contextual information. Can be an object or a constructor.","\n        ","@self <object>","\n      ","\n    ","\n  ","\n  ","If you haven't specified a type for your arguments or return value, and you're using ","Feather",", it will assume a data type for them automatically, based on your function body.","\n  ","See information on data types for ","@param"," and ","@return"," on ","Feather Data Types",".","\n  "],["\n  ","To get an idea of how this would work when writing your own functions, let's take this basic example:","\n  ","function is_same_object(_id, _obj)","\n    {","\n        if (_id.object_index == _obj)","\n        {","\n            return true;","\n        }","\n        else return false;","\n    }","\n  ","All this script does is check to see if an instance has the same ","object_index"," as a given object and would be called simply as:","\n  ","if is_same_object(id, obj_Player)","\n    {","\n        instance_destroy()","\n    }","\n  ","However, writing that into the code editor will show you the argument variable names directly (","_id"," and ","_obj",") which in most cases is not very descriptive. You can use JSDoc to define custom argument names and descriptions, along with information for the function as well:","\n  ","/// @function                is_same_object(inst_id, object_id)","\n    /// @description             Check if the given instance belongs to the given object.","\n    /// @param {Id.Instance}     inst_id    The unique instance ID value of the instance to check.","\n    /// @param {Asset.GMObject}  object_id  The object index to be checked against.","\n    /// @return {Bool}","\n    ","\n    function is_same_object(_inst_id, _object_id)","\n    {","\n        return _inst_id.object_index == _object_id;","\n    }\n  ","\n  ","Now, when calling this function anywhere in your project, you will see the new argument names that were entered in the JSDoc comments:","\n  ","In the image above, the top part shows the function in the auto-complete and the bottom part shows how the argument helper at the bottom works. Note that both the optional \"type\" and the obligatory \"description\" parts of ","@param"," are not displayed by default in the IDE code complete, and to see them you must activate the options in the ","GML Preferences",".","\n  ","When using ","Feather",", you will see detailed information on the function when you hover your mouse over it:","\n  ","You can wrap an argument name in ","[]"," brackets to indicate that it is optional. The code editor will then expect any number of arguments between the minimum required arguments and the total number of arguments.","\n  ","For example, see the following function:","\n  ","/// @function    animate_position(end_x, end_y, start_x, start_y)","\n    /// @desc        Animates the instance to ending point, from optional starting point","\n    /// @arg end_x","\n    /// @arg end_y","\n    /// @arg [start_x]","\n    /// @arg [start_y]","\n    ","\n    function animate_position (x1, y1, x2, y2)","\n    {","\n        // Function code","\n    }\n  ","\n  ","The ","start_x"," and ","start_y"," arguments are marked as optional, which means the code editor will now expect 2 to 4 arguments, as can be seen in the warning message:","\n  ","\n  ","NOTE"," You will get the same behaviour if you use optional arguments in the function declaration. See ","script functions"," for more information.","\n  ","Since scripts can have multiple functions in them, you can add JSDoc comments for each of them before its declaration:","\n  ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","The Script Editor","\n        ","Next: ","Feather Data Types","\n      ","\n    ","\n    "],["\n  ","\n  ","\n  ","\n\n"]],"4":[["JSDoc Script Comments"]],"6":[["© Copyright YoYo Games Ltd. 2022 All Rights Reserved"]],"11":[["Examples"]],"id":"2638"})