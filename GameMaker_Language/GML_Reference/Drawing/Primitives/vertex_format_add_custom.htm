<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "8.2.2.6.7.0_14";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>vertex_format_add_custom</title>
  <meta name="generator" content="Adobe RoboHelp 2020"/>
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css"/>
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="Reference for vertex_format_add_custom"/>
  <meta name="rh-index-keywords" content="vertex_format_add_custom,vertex_type_float1,vertex_type_float2,vertex_type_float3,vertex_type_float4,vertex_type_colour,vertex_type_ubyte4,vertex_usage_position,vertex_usage_colour,vertex_usage_normal,vertex_usage_textcoord,vertex_usage_blendweight,vertex_usage_blendindices,vertex_usage_depth,vertex_usage_tangent,vertex_usage_binormal,vertex_usage_fog,vertex_usage_sample"/>
  <meta name="search-keywords" content="vertex_format_add_custom,vertex_type_float1,vertex_type_float2,vertex_type_float3,vertex_type_float4,vertex_type_colour,vertex_type_ubyte4,vertex_usage_position,vertex_usage_colour,vertex_usage_normal,vertex_usage_textcoord,vertex_usage_blendweight,vertex_usage_blendindices,vertex_usage_depth,vertex_usage_tangent,vertex_usage_binormal,vertex_usage_fog,vertex_usage_sample"/>
<meta name="brsnext" value="GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_end.htm"/><meta name="brsprev" value="GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_normal.htm"/></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="vertex_format_add_custom">
        <span>vertex_format_add_custom</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <span>Click here to see this page in full context</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>vertex_format_add_custom</h1>
  <p>This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:</p>
  <table style="">
    <colgroup>
      <col/>
      <col/>
    </colgroup>
    <tbody>
      <tr style="">
        <th colspan="2" style=""><span data-keyref="Type_Constant_Draw_Vertex_Data_Type"><a target="_blank" href="../../../../../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm">Vertex Data Type Constant</a></span></th>
      </tr>
      <tr style="">
        <th style="">Constant</th>
        <th style="">Description</th>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_type_float1</span></td>
        <td style="">A single floating point value</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_type_float2</span></td>
        <td style="">Two floating point values</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_type_float3</span></td>
        <td style="">Three floating point values</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_type_float4</span></td>
        <td style="">Four floating point values</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_type_colour</span></td>
        <td style="">Four component values (r, g, b, a)</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_type_ubyte4</span></td>
        <td style="">Four component unsigned byte values (from 0 to 255)</td>
      </tr>
    </tbody>
  </table>
  <p><br/>
    The use that these constants will be put too also needs to be defined so that the values can be &quot;bound&quot; properly within the shader being created. This is necessary due to the fact that DX and OpenGL have different requirements so if you don&#39;t bind them properly, they won&#39;t come through right in the shader. The available usage constants that you can choose are listed below and those you use will depend on the specifics of the shader being created:</p>
  <table style="">
    <colgroup>
      <col/>
      <col/>
    </colgroup>
    <tbody>
      <tr style="">
        <th colspan="2" style=""><span data-keyref="Type_Constant_Draw_Vertex_Usage"><a target="_blank" href="../../../../../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm">Vertex Usage Type Constant</a></span></th>
      </tr>
      <tr style="">
        <th style="">Constant</th>
        <th style="">Description</th>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_usage_position</span></td>
        <td style="">position values (x, y, z)</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_usage_colour</span></td>
        <td style="">colour values (r, g, b, a)</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_usage_normal</span></td>
        <td style="">vertex normal values (nx, ny, nz)</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_usage_textcoord</span></td>
        <td style="">UV coordinates (u, v)</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_usage_blendweight</span></td>
        <td style="">the blendweight of the input matrix (for skeletal animation, for example)</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_usage_blendindices</span></td>
        <td style="">the indices of the matrices to use (for skeletal animation, for example)</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_usage_depth</span></td>
        <td style="">vertex depth buffer value</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_usage_tangent</span></td>
        <td style="">tangent values</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_usage_binormal</span></td>
        <td style="">binormal values</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_usage_fog</span></td>
        <td style="">fog values</td>
      </tr>
      <tr style="">
        <td style=""><span class="inline">vertex_usage_sample</span></td>
        <td style="">sampler index</td>
      </tr>
    </tbody>
  </table>
  <p><br/>
    There are some important things to note when using custom formats like these:</p>
  <ul class="colour">
    <li>The <span class="inline">vertex_format_add_custom()</span> function only supports <span class="inline">vertex_usage_position</span>, <span class="inline">vertex_usage_colour</span>, <span class="inline">vertex_usage_normal</span> and <span class="inline">vertex_usage_textcoord</span> when using GLSL shaders. These will map to the shader attributes <span class="inline">in_Position</span>, <span class="inline">in_Colour[0 - ...]</span>, <span class="inline">in_Normal</span> respectively (anything that is not one of these three attributes - eg: texture coordinates - can be mapped to any attribute you define).</li>
    <li>In general you should use <span class="inline">vertex_usage_textcoord</span> for all extra parameters where possible, as types like <span class="inline">vertex_usage_blendweight</span> and <span class="inline">vertex_usage_tangent</span> are close to deprecated in most shader languages, and probably won&#39;t convert properly. Instead use <span class="inline">vec</span>, <span class="inline">vec2</span>, <span class="inline">vec3</span> or <span class="inline">vec4</span> types <span class="inline">vertex_usage_textcoord</span> and everything should work fine.</li>
    <li>GLSL ES does <i>not</i> support integer attributes, so passing in <span class="inline">ivec4</span>&#39;s does not work (this type is usually used when passing in <span class="inline">vertex_usage_blendindices</span>). What you need to do is pass in texture coordinates and then in the shader, convert them to <span class="inline">ivec4</span> like this:</li>
  </ul>
  <p> </p>
  <p class="code">attribute vec3 in_Position;<br/>
    attribute vec4 in_BlendIndices;<br/>
    attribute vec4 in_BlendWeights;<br/>
    <br/>
    varying vec4 v_vColour;<br/>
    varying mat4 v_mat;<br/>
    <br/>
    void main()<br/>
    {<br/>
        gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4( in_Position.xyz, 1.0);<br/>
        v_vColour = in_BlendWeights;<br/>
         ivec4 t = ivec4(in_BlendIndices);<br/>
         v_mat = gm_Matrices[ t.x ];<br/>
    }
  </p>
  <ul class="colour">
    <li>Blend weights are usually stored in an array and then accessed using blend indices, but you can see here that instead of defining <span class="inline">in_BlendIndices</span> as an <span class="inline">ivec4</span> attribute, it&#39;s a <span class="inline">vec4</span>, then cast to an <span class="inline">ivec4</span> in the code. This is then used to index the array created using the <span class="inline">gm_Matrix</span> (you can only access an array using an <span class="inline">INT</span> value - not a float).</li>
    <br/>
     
  </ul>
  <h4>Syntax:</h4>
  <p class="code">vertex_format_add_custom(type, usage);</p>
  <table style="">
    <tbody>
      <tr style="">
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr style="">
        <td>type</td>
        <td><span data-keyref="Type_Constant_Draw_Vertex_Data_Type"><a target="_blank" href="../../../../../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm">Vertex Data Type Constant</a></span></td>
        <td>The data type that this custom vertex data will hold (see the <b><i>type constants</i></b> listed above).</td>
      </tr>
      <tr style="">
        <td>usage</td>
        <td><span data-keyref="Type_Constant_Draw_Vertex_Usage"><a target="_blank" href="../../../../../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm">Vertex Usage Type Constant</a></span></td>
        <td>The use that the data will get(see the <b><i>usage constants</i></b> listed above).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">vertex_format_begin();<br/>
    vertex_format_add_textcoord();<br/>
    vertex_format_add_custom(vertex_type_float3, vertex_usage_position);<br/>
    my_format = vertex_format_end();</p>
  <p>The above code will create a new vertex format with just texture and 3 custom floating point values for position. It is then stores the format id in the variable &quot;my_format&quot;.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Primitives_And_Vertex_Formats.htm">Primitives And Vertex Formats</a></div>
        <div style="float:right">Next: <a href="vertex_format_end.htm">vertex_format_end</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
vertex_format_add_custom
vertex_type_float1
vertex_type_float2
vertex_type_float3
vertex_type_float4
vertex_type_colour
vertex_type_ubyte4
vertex_usage_position
vertex_usage_colour
vertex_usage_normal
vertex_usage_textcoord
vertex_usage_blendweight
vertex_usage_blendindices
vertex_usage_depth
vertex_usage_tangent
vertex_usage_binormal
vertex_usage_fog
vertex_usage_sample
-->
  <!-- TAGS
vertex_format_add_custom
-->

</body></html>