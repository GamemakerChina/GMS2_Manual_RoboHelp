<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "8.2.1.1_1";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>Data Types</title>
  <meta name="generator" content="Adobe RoboHelp 2020"/>
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css"/>
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="Page outlining Data Types"/>
  <meta name="rh-index-keywords" content="Data Types"/>
  <meta name="search-keywords" content="Data Types"/>
<meta name="brsnext" value="GameMaker_Language/GML_Overview/Language_Features/If_Else_and_Conditional_Operators.htm"/><meta name="brsprev" value="GameMaker_Language/GML_Overview/Variables/Constants.htm"/></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Data Types">
        <span>Data Types</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <span>Click here to see this page in full context</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Data Types</h1>
  <p>In previous section we covered <a href="Variables_And_Variable_Scope.htm">variables and their scoping rules</a> but little has been said about the different <b>data types</b> that a variable can store. Therefore this section explains the different types and what they can be used for.</p>
  <p>Before continuing, let&#39;s just briefly explain what we mean by &quot;data types&quot;. When you create a variable it can be used to hold information, and when you call a function, it can also stored returned information. However this information can come in various &quot;flavours&quot; - for example, it can be a <em>real number</em> or it can be a <em>string</em>. These different types of values being used are called <b>data types</b> and when using the GameMaker Language they can be any of the following:</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true" data-skip-index="true">Real Numbers</span><span data-close-text="true">Real Numbers</span></a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Real numbers are any value that is not a string, nor any of the other possible data types. So, 124, 45639.566546456, 0, -45.5 etc... are all examples of real numbers. All real numbers are stored as 64-bit double-precision floating point values (or integer values), and the compiler will optimise where possible (for example, 0.0 will be optimised to the integer value of 0).</p>
    <p class="dropspot">When dealing with any value that is not an integer, you may experience slight rounding errors due to the nature of floating point maths. For more information on this and other number related functions, please see: <a href="../GML_Reference/Maths_And_Numbers/Number_Functions/Number_Functions.htm">GML Reference - Number Functions</a>.</p>
    <p class="note"><span class="note">NOTE</span> On the <b>HTML5</b> target, all real numbers are doubles.</p>
    <p class="dropspot">Note that while created variables in <span data-keyref="GameMaker Name">GameMaker</span> are all stored as double-precision floating point numbers or integers, you can still use other formats when dealing with extensions. These can be passed into <span data-keyref="GameMaker Name">GameMaker</span> from an extension and then checked using the appropriate <span class="inline">is_*()</span> function, a list of which can be found <a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">here</a>.</p>
    <p class="dropspot"> </p>
    <p> </p>
  </div>
  <p id="p"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#"><span data-open-text="true" data-skip-index="true">Boolean</span><span data-close-text="true">Boolean</span></a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot">A boolean is simply a value that can either be <span class="inline">true</span> or <span class="inline">false</span>. Note that currently <span data-keyref="GameMaker Name">GameMaker</span> will interpret a real number equal to or below 0.5 as a <span class="inline">false</span> value, and any real number greater than 0.5 as being <span class="inline">true</span>.
      This does <i>not</i> mean however that you should be checking 1 and 0 (or any other real number) for true and false, as you are also provided with the <b>constants</b> <span class="inline">true</span> and <span class="inline">false</span> which should always be used in your code to
      prevent any issues should real boolean data types be added in a future update.</p>
    <p class="dropspot">You can convert any real number into an implicitly boolean value using the following function:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/bool.htm">bool</a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true" data-skip-index="true">Strings</span><span data-close-text="true">Strings</span></a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot"><label for="one">A string is simply any text that has been placed in quotation marks &quot;...&quot;. You can perform certain operations on strings, like add two strings together to create a longer string (concatenation) and you can also change the string properties and even extract real numbers from it. For more information on strings and the string functions see: <a href="../GML_Reference/Strings/Strings.htm">GML Reference - Strings</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true" data-skip-index="true">Arrays</span><span data-close-text="true">Arrays</span></a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><label for="three">An array is a special data type that can be used to hold multiple values. You assign the array to a variable, and then &quot;fill in&quot; different indices of the array with values. This array can then be passed through to scripts and functions on a pass-by-reference basis, however should you modify the passed array, it will then become a copy of the original array and so will need to be returned back to the original variable for the array to be updated. For more information on arrays, please see: <a href="Arrays.htm">GML Overview - Arrays</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span data-open-text="true" data-skip-index="true">Structs</span><span data-close-text="true">Structs</span></a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><label for="eleven">A struct (sometimes called a &quot;lightweight object&quot;) is a raw data structure that acts as a container for variables of all data types. You assign a struct to a variable and in the struct you can then define further variables and these can then be read from or written to as required. For more detailed information on structs, please see the section <a href="Structs.htm">GML Overview - Structs</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#"><span data-open-text="true" data-skip-index="true">Method Variables</span><span data-close-text="true">Method Variables</span></a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><label for="twelve">A method variable is a variable that has been assigned a function and it can be used exactly the same as you would use a GML runtime function. For more detailed information, please see the section <a href="Method_Variables.htm">Method Variables</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#"><span data-open-text="true" data-skip-index="true">int64</span><span data-close-text="true">int64</span></a></p>
  <div class="droptext" data-targetname="drop-down13">
    <p class="dropspot">An &quot;int64&quot; is a 64-bit integer that can be created using <span class="inline"><a href="../GML_Reference/Variable_Functions/int64.htm">int64()</a></span> (by passing in a non-64-bit real number) or when reading a <span class="inline">buffer_u64</span> value from a <a href="../GML_Reference/Buffers/buffer_read.htm">buffer</a>.</p>
    <p class="dropspot">This can be used in places where a 64-bit integer is strictly required, or when you want to work with <a href="../../Additional_Information/Bitwise_Operators.htm">bit-shifting</a> and need those 64 bit positions.</p>
    <p class="dropspot">Any bitwise operations, even when run on non-64-bit values, will always return a 64-bit integer back.</p>
    <p class="dropspot">Divisions on int64 values will also return integers (e.g.: <span class="inline2">int64(5) / int64(2) = 2</span>).</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#"><span data-open-text="true" data-skip-index="true">Hexadecimal Literals</span><span data-close-text="true">Hexadecimal Literals</span></a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><span data-keyref="GameMaker Name">GameMaker</span> will accept <b>hexadecimal literals</b> as legitimate values. Hexadecimal values are especially common when working with colours, but can be used anywhere a positive integer value is required. Hexadecimal values can be formatted in the following two ways, where <span class="inline"><em>abcd</em></span> would be the actual hex value:</p>
    <p class="code"><span style="background-color: transparent;"><strong>$</strong><em>abcd</em></span><br/>
      <strong>0x</strong><em>abcd</em>
    </p>
    <p class="dropspot">For example, the following decimal values can be expressed as hexadecimal as shown:</p>
    <p class="code"><strong>11406</strong> -&gt; $2c8e, 0x2c8e<br/>
      <strong>16777215</strong> -&gt; $ffffff, 0xffffff
    </p>
    <hr/>
    <p class="dropspot">A hexadecimal value can also begin with a hash/pound symbol (<span class="inline2">#</span>), however when written this way, its value will not equal a similar hex value written using a previously shown format (<span class="inline2">$</span> or <span class="inline2">0x</span>). This is due to the way colours are interpreted in GML, which required the format for hash/pound hex values to be changed so that CSS colours could be written in an <span class="inline2">#RRGGBB</span> format. For more information, read <a href="../GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm#h">Hex Colours</a>.</p>
    <p class="dropspot">For example, the following two are not equal:</p>
    <p class="code">$2c8edd <strong>!=</strong> #2c8edd</p>
    <p class="dropspot">For them to refer to the same decimal value, you would have to swap the first two and last two characters:</p>
    <p class="code">$<strong>2c</strong>8edd <strong>=</strong><strong>=</strong> #dd8e<strong>2c</strong></p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down15" href="#"><span data-open-text="true" data-skip-index="true">Binary Literals</span><span data-close-text="true">Binary Literals</span></a></p>
  <div class="droptext" data-targetname="drop-down15">
    <p class="dropspot">You can write binary literals with the <span class="inline2">0b</span> prefix:</p>
    <p class="code">var _six = 0b0010 | 0b0100; // produces 0b0110, or 6</p>
    <p class="dropspot">The above code shows two binary values, <span class="inline2">0010</span> and <span class="inline2">0100</span>, being used in a <a href="../../Additional_Information/Bitwise_Operators.htm">bitwise &quot;OR&quot; operation</a>.</p>
    <p class="dropspot"><br/></p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#"><span data-open-text="true" data-skip-index="true">Pointer</span><span data-close-text="true">Pointer</span></a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">A pointer is a data type that &quot;points&quot; to a memory location. You cannot do operations on a pointer and it is used only for some very specific functions, like getting a texture or buffer address from memory for another function. For examples of functions that return a pointer you can see <a href="../GML_Reference/Buffers/buffer_get_address.htm"><span class="inline">buffer_get_address()</span></a> or <a href="../GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_texture.htm"><span class="inline">sprite_get_texture()</span></a>.</p>
    <p class="dropspot">There is also a function to check if a value is a pointer (see &quot;<b>Checking Data Types</b>&quot;, below) and a function to convert a value into a pointer:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/ptr.htm" style="background-color: transparent;">ptr</a></li>
    </ul>
    <p class="dropspot">You may also use (and get returned) the following built in constants when using pointers:</p>
    <table class=" cke_show_border" style="">
      <tbody>
        <tr style="">
          <th>Constant</th>
          <th>Description</th>
        </tr>
        <tr style="">
          <td><span class="inline">pointer_null</span></td>
          <td>This constant indicates that the pointer is not pointing to anything meaningful (the same as <span class="inline">NULL</span> in C++ or <span class="inline">null</span> in C#). This value is <a class="tooltip" title="A value that is considered &quot;false&quot; when used as a boolean, for example in an if() condition.">falsy</a>.</td>
        </tr>
        <tr style="">
          <td><span class="inline">pointer_invalid</span></td>
          <td>This constant simply means that the value is not a valid pointer</td>
        </tr>
      </tbody>
    </table>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#"><span data-open-text="true" data-skip-index="true">Enum</span><span data-close-text="true">Enum</span></a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot">An enum is an &quot;enumerator&quot;, and it essentially permits you to create your own limited data type with a list of constant values. Enums are explained in depth on the page for <a href="Variables/Constants.htm">Constants</a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#"><span data-open-text="true" data-skip-index="true">Undefined</span><span data-close-text="true">Undefined</span></a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot"><label for="seven">An undefined value (also known as a &quot;null&quot; value) is one where an expression doesn&#39;t have a correct value, although it is syntactically correct, and so must return <i>something</i>. For example, say you have a <a href="../GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">DS map</a> and use the function <a href="../GML_Reference/Data_Structures/DS_Maps/ds_map_find_value.htm"><span class="inline">ds_map_find_value()</span></a>. Now, what happens when the map does not have the value being looked for? Well, since the function is correctly formatted, and the issue is that the no such value exists, then it would return the constant <span class="inline">undefined</span>, and you can check for this constant as you would check for <span class="inline">true</span> or any other value.<br/></label></p>
    <p class="code"><label for="seven">var _value = ds_map_find_value(my_map, &quot;key&quot;);<br/><br/>if (<a href="../GML_Reference/Variable_Functions/is_undefined.htm">is_undefined</a>(value)) {<br/>    show_debug_message(&quot;The key does not exist!&quot;);<br/>}</label><br/></p>
    <p class="dropspot"> <br/></p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#"><span data-open-text="true" data-skip-index="true">NaN</span><span data-close-text="true">NaN</span></a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p class="dropspot"><label for="nine"><span class="inline">NaN</span> stands for &quot;not a number&quot;, and is a constant that can be returned when the compiler cannot evaluate the results of an operation as a number. For example, 0/0 cannot be defined as a real number, and is therefore represented by <span class="inline">NaN</span>, or the square root of a negative number - which is considered an &quot;imaginary&quot; number - cannot be represented as a real number, and so is represented by <span class="inline">NaN</span>.</label></p>
    <p class="dropspot">Note that since <span class="inline">NaN</span> is not a number, it cannot be compared to itself, so comparisons such as <span class="inline">NaN == NaN</span> will return <span class="inline">false</span>. Same goes for an array comparison such as this:</p>
    <p class="code">show_debug_message(array_equals([NaN], [NaN]));<br/>
      <br/>
      // Output: 0 (false)
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#"><span data-open-text="true" data-skip-index="true">Infinity</span><span data-close-text="true">Infinity</span></a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="dropspot">The constant <span class="inline">infinity</span> refers to a number that is considered infinite, such as the result you would get when dividing any floating point value by zero, eg: 1.0/0.</p>
    <p class="dropspot">Note that the <span class="inline">infinity</span> constant is equal to itself, so <span class="inline">infinity == infinity</span> will return <span class="inline">true</span>.</p>
  </div>
  <p id="variable"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#"><span data-open-text="true" data-skip-index="true">Any</span><span data-close-text="true">Any</span></a></p>
  <div class="droptext" data-targetname="drop-down12">
    <p class="dropspot">The &quot;<strong>Any</strong>&quot; data type can be found on many pages in the manual, e.g. <a href="../GML_Reference/Variable_Functions/is_string.htm">in the arguments,</a> or as a <a href="../GML_Reference/Variable_Functions/array_get.htm">return value</a>. It indicates that <em>any type of value</em> is accepted, or can be returned.</p>
  </div>
  <h2>Underscores in Literals</h2>
  <p>You can use underscores (<span class="inline2">_</span>) in numeric literals, such as real numbers, hexadecimal and binary values. These are ignored during compilation and only serve as visual seperators. Here are a few examples:</p>
  <p class="code">var _integer = 100_000_000; // same as 100000000<br/>
    var _float   = 3_141.59; // same as 3141.59<br/>
    var _hexadec = 0xDEAD_BEEF; // same as 0xDEADBEEF<br/>
    var _binary  = 0b01101000_01101001; // same as 0b0110100001101001</p>
  <p>All the underscores used in the literals shown above only make them easier to read, and don&#39;t change anything about their functionality.</p>
  <h2>Related Pages</h2>
  <p>You can check the data type of any variable using the functions listed on the following the page:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Variable Functions</a></li>
  </ul>
  <p>You can also find arithmetic type tables that show the results of different operations using mixed variable data types here:</p>
  <ul class="colour">
    <li><a href="../../Additional_Information/Type_Tables.htm">Type Tables</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="GML_Overview.htm">GML Overview</a></div>
        <div style="float:right">Next: <a href="Language_Features/If_Else_and_Conditional_Operators.htm">if / else and Conditional Operators</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Data Type - Real
Data Type - String
Data Type - Pointer
Data Type - Undefined
Data Type - Enum
Data Type - True
Data Type - False
Data Type - Array
Data Type - Boolean
Data Type - NaN
Data Type - Infinite
Data Type - Struct
real
string
pointer
undefined
enum
true
false
arrays
boolean
NaN
infinite
ptr
struct
pointer_null
pointer_invalid
-->
  <!-- TAGS
data_type
real
string
pointer
undefined
enum
true
false
arrays
boolean
ptr
struct
pointer_null
pointer_invalid
-->

</body></html>